name: Build OpenWrt for Mediatek_mt7988a_bpi-r4 and release

on:
  workflow_dispatch:

env:
  REMOTE_REPOSITORY: openwrt/openwrt
  REMOTE_BRANCH: main
  CONFIG_FILE: bpi-r4.config
  HW_OFFLOAD_115_PATCH: 115-net-ethernet-mtk_eth_soc-fix-dma-for-devices-with-more-than-4gb-of-dram.patch
  HW_OFFLOAD_116_PATCH: 116-add-ppe-source-port.patch
  CUSTOM_FILES_PATH: files/
  RELEASE_PREFIX: Mediatek_mt7988a_bpi-r4

jobs:
  check_commits:
    name: Check for new commits
    runs-on: ubuntu-latest
    outputs:
      new_commits: ${{ steps.check_new_commits.outputs.new_commits }}
      latest_commit_sha: ${{ steps.check_new_commits.outputs.latest_commit_sha }}
    steps:
      - name: Check for new commits
        id: check_new_commits
        run: |
          latest_commit_sha=$(curl -sL "https://api.github.com/repos/${{ env.REMOTE_REPOSITORY }}/commits?sha=${{ env.REMOTE_BRANCH }}&per_page=1" | jq -r '.[0].sha')
          last_built_commit_sha=$(curl -sL "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.body' | grep -oP 'Build Commit: \K\w+' || echo '')
          echo "new_commits=$([[ "$latest_commit_sha" != "$last_built_commit_sha" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "latest_commit_sha=$latest_commit_sha" >> $GITHUB_OUTPUT

  build:
    name: Build OpenWrt
    needs: check_commits
    if: needs.check_commits.outputs.new_commits == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            build-essential clang flex bison g++ gawk gcc-multilib \
            g++-multilib gettext git libncurses-dev libssl-dev \
            python3-distutils rsync unzip zlib1g-dev file wget
      - name: Checkout remote repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REMOTE_REPOSITORY }}
          ref: ${{ env.REMOTE_BRANCH }}
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          path: "custom_repo"
      - name: Update and install feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      - name: Apply HW OFFLOAD PATCH 115
        run: |
          mv custom_repo/patches/BPI-r4/${{ env.HW_OFFLOAD_115_PATCH }} target/linux/mediatek/patches-6.6/${{ env.HW_OFFLOAD_115_PATCH }}
          cd target/linux/mediatek/patches-6.6
          git apply ${{ env.HW_OFFLOAD_115_PATCH }}
      - name: Apply HW OFFLOAD PATCH 116
        run: |
          mv custom_repo/patches/BPI-r4/${{ env.HW_OFFLOAD_116_PATCH }} target/linux/mediatek/patches-6.6/${{ env.HW_OFFLOAD_116_PATCH }}
          cd target/linux/mediatek/patches-6.6
          git apply ${{ env.HW_OFFLOAD_116_PATCH }}
      - name: Configure firmware image
        run: |
          mv custom_repo/${{ env.CONFIG_FILE }} .config
          make defconfig -j$(nproc)
      - name: Include custom files
        run: |
          mkdir -p ${{ env.CUSTOM_FILES_PATH }}
          mv custom_repo/BPI-r4/${{ env.CUSTOM_FILES_PATH }}* ${{ env.CUSTOM_FILES_PATH }}
      - name: Build the firmware image
        run: make download world V=s -j$(nproc)
      - name: Package output
        run: tar -cvf bpi_r4-images.tar bin/targets/mediatek/filogic
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bpi_r4-images
          path: bpi_r4-images.tar

  release:
    name: Create release
    needs: [build, check_commits]
    if: needs.build.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bpi_r4-images
      - name: Extract artifacts
        run: tar xf bpi_r4-images.tar
      - name: Get current date
        run: echo "RELEASE_DATE=$(date +%F)" >> $GITHUB_ENV
      - name: Create release
        uses: softprops/action-gh-release@master
        with:
          files: bin/targets/mediatek/filogic/*
          tag_name: ${{ env.RELEASE_PREFIX }}-${{ env.RELEASE_DATE }}
          name: Openwrt BPI-r4 ${{ env.RELEASE_DATE }}
          body: |
            Updated prebuilt images for ${{ env.RELEASE_DATE }}
            Build Commit: ${{ needs.check_commits.outputs.latest_commit_sha }}
      - name: Clean up old releases
        uses: dev-drprasad/delete-older-releases@master
        with:
          keep_latest: 5
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
